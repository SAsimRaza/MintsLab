/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MintsLabFactoryInterface extends utils.Interface {
  functions: {
    "changeGovernance(address)": FunctionFragment;
    "checkRoyality(uint256)": FunctionFragment;
    "createNFTshop(string,string)": FunctionFragment;
    "ftypetoRoyality(uint256)": FunctionFragment;
    "governanceDetails()": FunctionFragment;
    "updateGovernanceShare(uint256,bool)": FunctionFragment;
    "updateRoyality(uint256,uint256,bool)": FunctionFragment;
    "userToShop(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRoyality",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTshop",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ftypetoRoyality",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGovernanceShare",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoyality",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "userToShop", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "changeGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRoyality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFTshop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftypetoRoyality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernanceShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoyality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userToShop", data: BytesLike): Result;

  events: {};
}

export interface MintsLabFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MintsLabFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeGovernance(
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkRoyality(
      ftype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    createNFTshop(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ftypetoRoyality(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governanceDetails(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    updateGovernanceShare(
      _govSharePercentage: BigNumberish,
      _royalityStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRoyality(
      _ftype: BigNumberish,
      _royality: BigNumberish,
      _royalityStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userToShop(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  changeGovernance(
    newGov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkRoyality(
    ftype: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  createNFTshop(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ftypetoRoyality(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governanceDetails(
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  updateGovernanceShare(
    _govSharePercentage: BigNumberish,
    _royalityStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRoyality(
    _ftype: BigNumberish,
    _royality: BigNumberish,
    _royalityStatus: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userToShop(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeGovernance(newGov: string, overrides?: CallOverrides): Promise<void>;

    checkRoyality(
      ftype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    createNFTshop(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    ftypetoRoyality(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceDetails(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    updateGovernanceShare(
      _govSharePercentage: BigNumberish,
      _royalityStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRoyality(
      _ftype: BigNumberish,
      _royality: BigNumberish,
      _royalityStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    userToShop(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    changeGovernance(
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkRoyality(
      ftype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNFTshop(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ftypetoRoyality(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceDetails(overrides?: CallOverrides): Promise<BigNumber>;

    updateGovernanceShare(
      _govSharePercentage: BigNumberish,
      _royalityStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRoyality(
      _ftype: BigNumberish,
      _royality: BigNumberish,
      _royalityStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userToShop(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeGovernance(
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkRoyality(
      ftype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNFTshop(
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ftypetoRoyality(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateGovernanceShare(
      _govSharePercentage: BigNumberish,
      _royalityStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRoyality(
      _ftype: BigNumberish,
      _royality: BigNumberish,
      _royalityStatus: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userToShop(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
