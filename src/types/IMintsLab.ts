/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IMintsLabInterface extends utils.Interface {
  functions: {
    "checkRoyality(uint256)": FunctionFragment;
    "governanceDetails()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkRoyality",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceDetails",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkRoyality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceDetails",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMintsLab extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMintsLabInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkRoyality(
      ftype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    governanceDetails(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        wallet: string;
        dev: string;
        govShare: BigNumber;
      }
    >;
  };

  checkRoyality(
    ftype: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  governanceDetails(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      wallet: string;
      dev: string;
      govShare: BigNumber;
    }
  >;

  callStatic: {
    checkRoyality(
      ftype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    governanceDetails(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        wallet: string;
        dev: string;
        govShare: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    checkRoyality(
      ftype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceDetails(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkRoyality(
      ftype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
